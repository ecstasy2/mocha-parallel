#!/usr/bin/env node
'use strict';

var fmt = require('util').format;
var os = require('os');
var parallelize = require('./lib/parallelizer').parallelize;
var program = require('commander');
var reporters = require('./reporters');

function main() {
  program
    .description('Run a list of tasks in parallel')
    .usage('--cwd /path/to/cwd ' +
           '--env "FOO=bar BAR=baz" ' +
           '--format "some mocha command %s" ' +
           '--tasks "one_test.js two_test.js three_test.js"')
    .version(require('./package').version)
    .option('-c, --cwd [cwd]', 'directory to execute tasks')
    .option('-e, --env [env]', 'environment variables')
    .option('-f, --format [format]', 'template for tasks')
    .option('-p, --parallel [parallel]', 'number of parallel tasks')
    .option('-t, --tasks [tasks]', 'list of tasks')
    .option('-r, --reporter [reporter]', 'reporter for output, `dot` or `xunit`')
    .parse(process.argv);

  var format = program.format || '%s';
  var tasks = program.tasks.split(/\s+/).map(function (task) {
    return fmt(format, task);
  });

  var opts = {
    cwd: program.cwd || process.cwd(),
    reporter: reporters[program.reporter ? program.reporter : 'dot']
  };

  if (program.env) {
    var envs = program.env.split(/\s+/);
    var env = {};
    envs.forEach(function (pair) {
      pair = pair.split('=');
      env[pair[0]] = pair[1];
    });

    opts.env = env;
  }

  if (program.parallel && /\d+/.test(program.parallel)) {
    opts.parallel = parseInt(program.parallel, 10);
  } else {
    opts.parallel = os.cpus().length;  /* default to number of cpus */
  }

  opts.reporter.init(tasks.length, opts.parallel);
  parallelize(tasks, opts);
}

if (require.main === module) {
  main();
}
